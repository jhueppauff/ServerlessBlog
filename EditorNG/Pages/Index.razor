@page "/"

@using Microsoft.AspNetCore.Authorization;
@using System.Reflection;
@using EditorNG.Models;

@inject BlogClient blogClient;
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<a href="/add" class="btn btn-success"><span class="glyphicon glyphicon-plus-sign"></span> Add</a>
<button @onclick="@Refresh" class="btn btn-success"><span class="glyphicon glyphicon-refresh"></span> Refresh</button>

@if (posts != null)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                @foreach (PropertyInfo propertyInfo in posts[0].GetType().GetProperties())
                {
                    @if (propertyInfo.Name != "PartitionKey" && propertyInfo.Name != "RowKey" && propertyInfo.Name != "ImageUrl")
                    {
                        <th>@propertyInfo.Name</th>
                    }
                }
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (PostMetadata post in posts)
            {
                <tr>
                    @foreach (PropertyInfo propertyInfo in post.GetType().GetProperties())
                    {
                        @if (propertyInfo.Name != "PartitionKey" && propertyInfo.Name != "RowKey" && propertyInfo.Name != "ImageUrl")
                        {
                            <td>@propertyInfo.GetValue(post)</td>
                        }
                    }
                    <td>
                        <button @onclick="@(() => Delete(post))" class="btn btn-danger"><span class="glyphicon glyphicon-remove-sign"></span> Delete</button>
                        <a href=@($"/Edit/{post.Slug}") Match="NavLinkMatch.All" class="btn btn-info"><span class="glyphicon glyphicon-edit"></span> Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading ...</p>
}




@code {
    private List<PostMetadata> posts;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh() 
    {
        posts = await blogClient.GetBlogPostsAsync();
    }
    
    private async Task Delete(PostMetadata post)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the post '{post.Title}'?"))
            return;

        await blogClient.DeleteBlogPostAsync(post);
        await Refresh();
    }
}