@page "/"

@using Microsoft.AspNetCore.Authorization;
@using System.Reflection;
@using EditorNG.Models;
@using System;
@inject BlogClient blogClient;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;

@attribute [Authorize]

<MudTable Items="@posts" Striped="@true" Hover="@true" Loading="@loading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Blog Posts</MudText>
        <MudSpacer />
        <MudButtonGroup>
            <MudFab href="/add" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add</MudFab>
            <MudFab Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Refresh" OnClick="@(() => Refresh())">Refresh</MudFab>
        </MudButtonGroup>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Public</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Tags</MudTh>
        <MudTh>Created on</MudTh>
        <MudTh>Views</MudTh>
        <MudTh>Intro</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Public">
            @if (context.IsPublic)
            {
                <MudIcon Icon="@Icons.Material.Filled.Public" Color="Color.Success" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.PublicOff" Color="Color.Error" />
            }
        </MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Tags">
            @foreach (var tag in context.Tags.Split(';'))
            {
                <MudPaper Class="pa-1 ma-1">@tag</MudPaper>
            }
        </MudTd>
        <MudTd DataLabel="Created on">@context.Published</MudTd>
        <MudTd DataLabel="Views">@context.Views</MudTd>
        <MudTd DataLabel="Intro">@context.Preview</MudTd>
        <MudTd DataLabel="Actions">
            <MudFab Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@((e) => DeletePost(context))">Delete</MudFab>
            @if (!context.IsPublic)
            {
                <MudFab StartIcon="@Icons.Material.Filled.Public" OnClick="(e) => ShowPublishOption(context)" Variant="Variant.Filled" Color="Color.Success">
                    <span class="glyphicon glyphicon-send"></span> Publish
                </MudFab>
            }
            <MudFab href=@($"/Edit/{context.Slug}") StartIcon="@Icons.Material.Filled.Edit" Match="NavLinkMatch.All" Variant="Variant.Filled" Color="Color.Success">Edit</MudFab>
        </MudTd>
    </RowTemplate>
</MudTable>

<ModalDialog @ref="modal">
    <Title>Publish Dialog</Title>

    <Body>
        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Select Publish Date" @bind-Date="@publishDate" />
    </Body>
    <Footer>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => Publish())">Publish</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => modal.Close()">Close</MudButton>
    </Footer>
</ModalDialog>

@code {
    private ModalDialog modal { get; set; }
    private DateTime? publishDate = DateTime.Now;
    private string selectedPost;
    private bool loading = true;
    private List<PostMetadata> posts = [];

    protected override async Task OnInitializedAsync()
    {
        await Refresh();

        var pageViews = await blogClient.GetPageViewsAsync();

        foreach (var pageView in pageViews)
        {
            var post = posts.FirstOrDefault(x => x.PartitionKey == pageView.Slug);

            if (post != null)
            {
                post.Views = pageView.Views;
            }
        }
    }

    private async Task DeletePost(PostMetadata post)
    {
        var parameters = new DialogParameters { ["post"] = post };

        var dialog = DialogService.Show<DeleteBlogPostDialog>("Delete Post", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await blogClient.DeleteBlogPostAsync(post);
            await Refresh();
        }
    }

    private async Task Refresh()
    {
        loading = true;
        posts = await blogClient.GetBlogPostsAsync();
        loading = false;
    }

    private void ShowPublishOption(PostMetadata post)
    {
        selectedPost = post.Slug;
        modal.Open();
    }

    private async Task Publish()
    {
        await blogClient.PublishPostAsync(selectedPost, publishDate ?? DateTime.UtcNow);
        modal.Close();
    }
}