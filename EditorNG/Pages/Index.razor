@page "/"

@using Microsoft.AspNetCore.Authorization;
@using System.Reflection;
@using EditorNG.Models;
@using System;
@inject BlogClient blogClient;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;

@attribute [Authorize]

<MudButton href="/add" Variant="Variant.Filled" Color="Color.Info">Add</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => Refresh())">Refresh</MudButton>

@if (posts != null)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Public</th>
                <th scope="col">Title</th>
                <th scope="col">Tags</th>
                <th scope="col">Created on</th>
                <th scope="col">Views</th>
                <th scope="col">Intro</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (PostMetadata post in posts)
            {
                <tr>
                    <td>
                        @if (post.IsPublic)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Public" Color="Color.Success" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.PublicOff" Color="Color.Error" />
                        }
                    </td>
                    <td>
                        <MudText Typo="Typo.subtitle1">@post.Title</MudText>
                    </td>
                    <td>
                        @foreach (var tag in post.Tags.Split(';'))
                        {
                            <MudPaper Class="pa-1 ma-1">@tag</MudPaper>
                        }
                    </td>
                    <td>
                        <MudText Typo="Typo.body2">@post.Published</MudText>
                    </td>
                    <td>
                        <MudText Typo="Typo.body2">@post.Views</MudText>
                    </td>
                    <td>
                        <MudText Typo="Typo.body2">@post.Preview</MudText>
                    </td>
                    <td>
                        <div class="btn-group">
                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@((e) => DeletePost(post))">Delete</MudButton>
                                @if (!post.IsPublic)
                                {
                                    <MudButton OnClick="(e) => ShowPublishOption(post)" Variant="Variant.Filled" Color="Color.Success">
                                        <span class="glyphicon glyphicon-send"></span> Publish
                                    </MudButton>
                                }
                                <MudButton href=@($"/Edit/{post.Slug}") Match="NavLinkMatch.All" Variant="Variant.Filled" Color="Color.Success">Edit</MudButton>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading ...</p>
}

<ModalDialog @ref="modal">
    <Title>Publish Dialog</Title>

    <Body>
        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Select Publish Date" @bind-Date="@publishDate" />
    </Body>
    <Footer>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => Publish())">Publish</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => modal.Close()">Close</MudButton>
    </Footer>
</ModalDialog>

@code {
    private ModalDialog modal { get; set; }
    private DateTime? publishDate = DateTime.Now;
    private string selectedPost;
    private List<PostMetadata> posts;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();

        var pageViews = await blogClient.GetPageViewsAsync();

        foreach (var pageView in pageViews)
        {
            var post = posts.FirstOrDefault(x => x.PartitionKey == pageView.Slug);

            if (post != null)
            {
                post.Views = pageView.Views;
            }
        }
    }

    private async Task DeletePost(PostMetadata post)
    {
        var parameters = new DialogParameters { ["post"] = post };

        var dialog = DialogService.Show<DeleteBlogPostDialog>("Delete Post", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await blogClient.DeleteBlogPostAsync(post);
            await Refresh();
        }
    }

    private async Task Refresh()
    {
        posts = await blogClient.GetBlogPostsAsync();
    }

    private void ShowPublishOption(PostMetadata post)
    {
        selectedPost = post.Slug;
        modal.Open();
    }

    private async Task Publish()
    {
        await blogClient.PublishPostAsync(selectedPost, publishDate ?? DateTime.UtcNow);
        modal.Close();
    }
}