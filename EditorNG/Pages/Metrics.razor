@page "/metrics"

@using Microsoft.AspNetCore.Authorization;
@using System.Reflection;
@using EditorNG.Models;
@using System.Net;

@using Plotly.Blazor;
@using Plotly.Blazor.Traces;
@using Plotly.Blazor.LayoutLib;

@inject BlogClient blogClient;
@inject IJSRuntime JSRuntime;

@attribute [Authorize]

<MudSelect T="string" Label="Posts" MultiSelection="true" AnchorOrigin="Origin.BottomCenter" ValueChanged="(e) => LoadGraph(e)">
    @if (posts != null)
    {
        @foreach (var post in posts)
        {
            <MudSelectItem Value="@post.Slug" />
        }
    }
</MudSelect>

@if (loaded)
{
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" ChartOptions="@_options" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="100%"></MudChart>
}

@code {
    private readonly ChartOptions _options = new();
    private IEnumerable<string> selectedOptions { get; set; } = new HashSet<string>();
    private List<string> selectedValues { get; set; } = new();
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public string[] XAxisLabels;
    public string[] Dates;
    public List<ChartSeries> Series = new List<ChartSeries>();
    private List<PostMetadata> posts;
    private bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        posts = await blogClient.GetBlogPostsAsync();

        XAxisLabels = new string[31];
        Dates = new string[31];

        for (int i = 0; i < 31; i++)
        {
            XAxisLabels[i] = DateTime.Now.AddDays(-i).ToString("dd.MM");
            Dates[i] = DateTime.Now.AddDays(-i).ToShortDateString();
        }

        XAxisLabels = XAxisLabels.Reverse().ToArray();
        Dates = Dates.Reverse().ToArray();

        _options.YAxisLines = true;
        _options.YAxisTicks = 5;
    }

    private Tuple<bool, string> GetLastChangedValue(string input)
    {
        List<string> selectedPosts = input.Split(", ").ToList();
        string changedPost;

        if (selectedPosts.Count > selectedValues.Count)
        {
            // new entry
            changedPost = selectedPosts.Except(selectedValues).FirstOrDefault();
            selectedValues.Add(changedPost);
            return new Tuple<bool, string>(true, changedPost);
        }
        else if (selectedPosts.Count <= selectedValues.Count)
        {
            // entry removed
            changedPost = selectedValues.Except(selectedPosts).FirstOrDefault();
            selectedValues.Remove(changedPost);
            return new Tuple<bool, string>(false, changedPost);
        }
        else
        {
            return null;
        }
    }

    private async Task LoadGraph(string selectedPosts)
    {
        var result = GetLastChangedValue(selectedPosts);
        string selectedPost = result.Item2;

        if (!result.Item1)
        {
            // Value was removed
            if (!String.IsNullOrEmpty(selectedPosts))
            {
                Series.Remove(Series.FirstOrDefault(x => x.Name == selectedPost));
            }
            else
            {
                Series.Clear();
                loaded = false;
            }
        }
        else
        {
            // Value was added
            var response = await blogClient.GetPageViewHistoryAsync(selectedPost);

            List<double> data = new List<double>();

            for (int i = 0; i < Dates.Length; i++)
            {
                var metricDay = response.FirstOrDefault(x => x.Timestamp == Convert.ToDateTime(Dates[i]));
                int views = metricDay != null ? metricDay.Views : 0;
                data.Add(views);
            }

            Series.Add(new ChartSeries()
                {
                    Name = selectedPost,
                    Data = data.ToArray<double>()
                });

            loaded = true;
        }
    }
}