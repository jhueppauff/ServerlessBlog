@page "/metrics"

@using Microsoft.AspNetCore.Authorization;
@using System.Reflection;
@using EditorNG.Models;
@using System.Net;

@using Plotly.Blazor;
@using Plotly.Blazor.Traces;
@using Plotly.Blazor.LayoutLib;

@inject BlogClient blogClient;
@inject IJSRuntime JSRuntime;

@attribute [Authorize]

<select class="form-select form-select-lg mb-3" @onchange="LoadGraph">
    @if (posts != null)
    {
        @foreach (var post in posts)
        {
            <option value="@post.Slug">@post.Slug</option>
        }
    }
</select>

<PlotlyChart @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />

@code {
    private List<PostMetadata> posts;
    private string selectedPost;
    string[] Labels;

    Config config = new Config()
        {
            Responsive = true
        };

    Layout layout = new Layout()
        {
            Title = new Title { Text = "Page Views in the last 31 days" },
            YAxis = new List<YAxis>
        {
            new()
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title { Text = "Page Views" }
            }
        }
        };

    PlotlyChart chart;
    IList<ITrace> data;


    protected override async Task OnInitializedAsync()
    {
        posts = await blogClient.GetBlogPostsAsync();

        Labels = new string[31];
        for (int i = 0; i < 31; i++)
        {
            Labels[i] = DateTime.Now.AddDays(-i).ToShortDateString();
        }

        Labels = Labels.Reverse().ToArray();
    }

    private async Task LoadGraph(ChangeEventArgs e)
    {
        selectedPost = e.Value.ToString();
        var response = await blogClient.GetPageViewHistoryAsync(selectedPost);
        
        await chart.Clear();
        data.Clear();
        var x = new List<DateOnly>();
        var y = new List<int>();

        for (int i = 0; i < Labels.Length; i++)
        {
            var metricDay = response.FirstOrDefault(x => x.Timestamp == Convert.ToDateTime(Labels[i]));
            int views = metricDay != null ? metricDay.Views : 0;

            if (i == 0)
            {
                var scatter = new ScatterGl
                    {
                        Name = $"{views} Views",
                        X = new List<object> { Labels[i] },
                        Y = new List<object> { views },
                        Fill = Plotly.Blazor.Traces.ScatterGlLib.FillEnum.ToZeroY,
                        FillColor = true,
                        ShowLegend = false,
                        Mode = Plotly.Blazor.Traces.ScatterGlLib.ModeFlag.Lines | Plotly.Blazor.Traces.ScatterGlLib.ModeFlag.Markers
                    };

                await chart.AddTrace(scatter);
                await chart.React();
            }
            else
            {
                string date = Labels[i];
                await chart.ExtendTrace(date, views, -1);
            }
        }

        await chart.React();
    }
}