@page "/images"

@using Microsoft.AspNetCore.Authorization;
@using System.Reflection;
@using EditorNG.Models;
@using System.IO
@using System.Net

@inject BlogClient blogClient;
@inject IJSRuntime JSRuntime

@attribute [Authorize]

<ModalDialog @ref="uploadModal">
    <Title>Upload an image</Title>
    <Body>
        <div class="drag-drop-zone">
            <InputFile OnChange="@OnInputFileChange" multiple />
            <br />
            @status
        </div>

        <a href="@link" target="_blank" rel="noopener noreferrer">@link</a>
    </Body>
    <Footer>
        <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="@UploadFile">Upload</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" data-dismiss="uploadModal" @onclick="() => uploadModal.Close()">Close</MudButton>
    </Footer>
</ModalDialog>

<ModalDialog @ref="previewModal">
    <Title>Preview</Title>
    <Body>
        <MudImage src="@link" Fluid="true" Class="rounded-lg" />
    </Body>
    <Footer>
        <MudButton Variant="Variant.Filled" Color="Color.Info" data-dismiss="previewModal" @onclick="() => previewModal.Close()">Close</MudButton>
    </Footer>
</ModalDialog>

<MudTable Items="@blobs" Striped="@true" Hover="@true" Loading="@loading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Images</MudText>
        <MudSpacer />
        <MudFab Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="() => uploadModal.Open()">Upload new image</MudFab>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Url</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Url">@context.Url</MudTd>
        <MudTd DataLabel="Action">
            <MudFab Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Preview" Color="Color.Info" OnClick="@(() => PreviewBlob(context))">Preview</MudFab>
            <MudFab Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteBlob(context))">Delete</MudFab>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private bool loading = true;
    private ModalDialog uploadModal { get; set; }
    private ModalDialog previewModal { get; set; }
    private List<Blob> blobs = [];
    private string link = string.Empty;
    private string encodedLink = string.Empty;
    private const string DefaultStatus = "Drop a file here to upload it, or click to choose a file";
    private const int MaxFileSize = 200 * 1024 * 1024;
    private string status = DefaultStatus;
    private InputFileChangeEventArgs inputFileChangeEventArgs;

    private string linkStyle = "display:none";

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (e != null)
        {
            inputFileChangeEventArgs = e;
        }
    }

    private async Task UploadFile()
    {
        using var content = new MultipartFormDataContent();

        var file = inputFileChangeEventArgs.GetMultipleFiles(1)[0];

        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = $"That's too big. Max size: {MaxFileSize} bytes.";
        }
        else
        {
            var response = await blogClient.UploadFileAsync(file, Path.GetExtension(file.Name).Replace(".", string.Empty));

            link = (await response.Content.ReadAsStringAsync()).TrimStart('"').TrimEnd('"');

            if (response.IsSuccessStatusCode)
            {
                encodedLink = WebUtility.UrlEncode(link);
                status = "Uploaded";
                linkStyle = "display:block";
            }
            else
            {
                status = $"Error: {await response.Content.ReadAsStringAsync()}";
            }
        }
    }

    private void PreviewBlob(Blob blob)
    {
        link = blob.Url;
        previewModal.Open();
    }

    private async Task GetBlobs()
    {
        loading = true;
        blobs = await blogClient.GetBlobsAsync();
        loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetBlobs();
    }

    private async Task DeleteBlob(Blob blob)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the post '{blob.Name}'?"))
            return;

        await blogClient.DeleteBlobAsync(blob);
    }
}