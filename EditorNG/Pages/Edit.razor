@page "/add"
@page "/edit/{Slug}"

@using EditorNG.Models;
@using System.Web
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using EditorNG.Components;

@inject BlogClient client;
@inject ISnackbar Snackbar
@inject IDialogService Dialog

@code {
    [Parameter]
    public string Slug { get; set; }
}

@attribute [Authorize]

<h1>@Slug</h1>

@if (post != null)
{
    <div class="row">
        <div class="col-lg-12">
            <br />
            <div class="form-group">
                <label class="col-md-4 control-label" for="title">Title</label>
                <input name="title" class="form-control" type="text" placeholder="Title?" id="title" @bind="@post.Title" />
            </div>

            <div class="row">
                <div class="col-6">
                    <textarea id="postcontent" name="content" class="form-control" data-provide="markdown"
                    @bind-value="editorBase.Body" @bind-value:event="oninput" data-iconlibrary="fa"
                              rows="10"></textarea>
                </div>
                <div class="col-6">
                    @((MarkupString)editorBase.Preview)
                </div>
            </div>

            <hr />

            <div class="form-group">
                <label class="col-md-4 control-label" for="preview">Preview Text</label>
                <textarea name="preview" class="form-control" type="text" placeholder="Preview" id="preview"
                @bind="@post.Preview"></textarea>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label" for="tags">Tags</label>
                        <input name="tags" class="form-control" type="text" placeholder="Tags" id="tags" @bind="@post.Tags" />
                    </div>
                </div>
                <div class="col-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label" for="imageUrl">Image Url</label>
                        <div class="input-group w-auto">
                            <input name="imageUrl" class="form-control" type="text" placeholder="https://blogimage"
                            @bind="@post.ImageUrl" />

                            <MudButton class="btn btn-primary" OnClick="(e) => OpenDialog()" Variant="Variant.Filled" Color="Color.Success" type="button" id="button-search-image" data-mdb-ripple-color="dark">
                                <span class="glyphicon glyphicon-search"></span> Select
                            </MudButton>
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <MudFab OnClick="@Save" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Success">
                Save
            </MudFab>
        </div>
    </div>
}
else
{
    <p>Loading ...</p>
}

<ModalDialog @ref="modal">
    <Title>Image search dialog</Title>

    <Body>
        @if (images != null)
        {
            <div class="row">
                @foreach (var image in images)
                {
                    <div class="col-lg-4 col-md-12 mb-4 mb-lg-0">
                        <img src="@image.Url" class="img-fluid" alt="@image.Name" @onclick="(() => SelectImage(image.Url))"/>
                    </div>
                }
            </div>
        }
        else
        {
            // Improve this to only be called when the modal dialog is opened
            // To reduce unnecessary api calls
            @LoadImages()
            <EditorNG.Components.Loading></EditorNG.Components.Loading>
        }
    </Body>
    <Footer>
        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => modal.Close()">Close</MudButton>
    </Footer>
</ModalDialog>

@code {
    private ModalDialog modal { get; set; }
    private PostMetadata post;
    private MarkdownEditorBase editorBase;
    private List<Blob> images;

    protected override async Task OnInitializedAsync()
    {
        editorBase = new MarkdownEditorBase();

        if (Slug != null)
        {
            editorBase.Body = HttpUtility.HtmlDecode(Regex.Unescape(await client.GetBlogPostMarkdownAsync(Slug)));
            post = await client.GetBlogPostAsync(Slug);
        }
        else
        {
            editorBase.Body = string.Empty;
            post = new PostMetadata();
        }
    }

    private void SelectImage(string url)
    {
        post.ImageUrl = url;
        modal.Close();
    }

    private void OpenDialog()
    {
        modal.Open();
    }

    private async Task LoadImages()
    {
        images = await client.GetBlobsAsync();
    }

    private async Task Save()
    {
        if (!string.IsNullOrEmpty(post.Title) && !string.IsNullOrEmpty(post.Preview) && !string.IsNullOrEmpty(post.ImageUrl) && !string.IsNullOrEmpty(editorBase.Body))
        {
            if (Slug == null)
            {
                string slug = createSlug();

                post.PartitionKey = slug;
                post.RowKey = slug;
            }

            try
            {
                await client.SaveBlogPostAsync(post, editorBase.Body);
                Snackbar.Add("Saved Blog Post sucessfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occured: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add($"Not all required fields have been filled out.", Severity.Error);
        }
    }

    private string createSlug()
    {
        string slug = post.Title.Replace(' ', '-');
        slug = System.Web.HttpUtility.UrlEncode(slug);

        return slug;
    }
}