@page "/add"
@page "/edit/{Slug}"

@using EditorNG.Models;
@using System.Web
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using EditorNG.Components;

@inject BlogClient client;
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@code {
    [Parameter]
    public string Slug { get; set; }
}

@attribute [Authorize]

<h1>@Slug</h1>

@if (post != null)
{
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-4">
                <MudForm Spacing=2>
                    <MudTextField T="string" @bind-Value="@post.Title" Label="Title" Required="true" RequiredError="Title is required!" />
                    <MudTextField T="string" @bind-Value="@editorBase.Body" Lines="@lines" Label="Content" Required="true" RequiredError="Content is required!"></MudTextField>
                </MudForm>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Preview</MudText>
                <MudText Typo="Typo.subtitle2">@((MarkupString)editorBase.Preview)</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12">
            <MudForm Spacing=4>
                <MudPaper Class="pa-4">
                    <MudTextField T="string" @bind-Value="@post.Preview" Lines="3" Label="Preview Text" Required="true" RequiredError="You need to specify a preview text!"></MudTextField>
                    <MudTextField T="string" @bind-Value="@post.Tags" Label="Tags" Required="true" RequiredError="Please specify some tags"></MudTextField>
                </MudPaper>
                <MudPaper Class="pa-4">
                    <div class="d-flex justify-center align-center">
                        <MudTextField T="string" @bind-Value="@post.ImageUrl" Label="Image Url" Required="true" RequiredError="Please provide a link to an image for the blog post"></MudTextField>
                        <MudButton StartIcon="@Icons.Material.Filled.Search" class="btn btn-primary" OnClick="(e) => OpenDialog()" Variant="Variant.Filled" Color="Color.Success" type="button" id="button-search-image" data-mdb-ripple-color="dark"></MudButton>
                    </div>
                </MudPaper>
                <MudPaper Class="pa-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="@Save" DropShadow="false">Save</MudButton>
                </MudPaper>
            </MudForm>
        </MudItem>
    </MudGrid>
}
else
{
    <Loading></Loading>
}

@code {
    private MudDialogInstance MudDialog { get; set; }
    private PostMetadata post;
    private MarkdownEditorBase editorBase;
    private List<Blob> images;
    private int lines = 50;

    protected override async Task OnInitializedAsync()
    {
        editorBase = new MarkdownEditorBase();

        if (Slug != null)
        {
            editorBase.Body = HttpUtility.HtmlDecode(Regex.Unescape(await client.GetBlogPostMarkdownAsync(Slug)));
            post = await client.GetBlogPostAsync(Slug);
            int lineCount = editorBase.Body.Split('\n').Length;
            lines = lineCount >= 2 ? lineCount : 40;
        }
        else
        {
            editorBase.Body = string.Empty;
            post = new PostMetadata();
        }
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ImageSelectDialog>("Simple Dialog", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            post.ImageUrl = result.Data.ToString();
        }
    }

    private async Task LoadImages()
    {
        images = await client.GetBlobsAsync();
    }

    private async Task Save()
    {
        if (!string.IsNullOrEmpty(post.Title) && !string.IsNullOrEmpty(post.Preview) && !string.IsNullOrEmpty(post.ImageUrl) && !string.IsNullOrEmpty(editorBase.Body))
        {
            if (Slug == null)
            {
                string slug = createSlug();

                post.PartitionKey = slug;
                post.RowKey = slug;
            }

            try
            {
                await client.SaveBlogPostAsync(post, editorBase.Body);
                Snackbar.Add("Saved Blog Post sucessfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An error occured: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add($"Not all required fields have been filled out.", Severity.Error);
        }
    }

    private string createSlug()
    {
        string slug = post.Title.Replace(' ', '-');
        slug = System.Web.HttpUtility.UrlEncode(slug);

        return slug;
    }
}