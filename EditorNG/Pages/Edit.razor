@page "/add"
@page "/edit/{Slug}"

@using EditorNG.Models;
@using System.Web
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using EditorNG.Components;

@inject BlogClient client;

@code {
    [Parameter]
    public string Slug { get; set; }
}

@attribute [Authorize]

<h1>@Slug</h1>

@if (post != null)
{
    <div class="row">
        <div class="col-lg-12">
            <br />
            <div class="form-group">
                <label class="col-md-4 control-label" for="title">Title</label>
                <input name="title" class="form-control" type="text" placeholder="Title?" id="title" @bind="@post.Title" />
            </div>

            <div class="row">
                <div class="col-6">
                    <textarea id="postcontent" name="content" class="form-control" data-provide="markdown"
                    @bind-value="editorBase.Body" @bind-value:event="oninput" data-iconlibrary="fa"
                    rows="10"></textarea>
                </div>
                <div class="col-6">
                    @((MarkupString) editorBase.Preview)
                </div>
            </div>

            <hr />

            <div class="form-group">
                <label class="col-md-4 control-label" for="preview">Preview Text</label>
                <textarea name="preview" class="form-control" type="text" placeholder="Preview" id="preview"
                @bind="@post.Preview"></textarea>
            </div>
            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label" for="tags">Tags</label>
                        <input name="tags" class="form-control" type="text" placeholder="Tags" id="tags" @bind="@post.Tags" />
                    </div>
                </div>
                <div class="col-6">
                    <div class="form-group">
                        <label class="col-md-4 control-label" for="imageUrl">Image Url</label>
                        <input name="imageUrl" class="form-control" type="text" placeholder="https://blogimage"
                        @bind="@post.ImageUrl" />
                    </div>
                </div>
            </div>
            <hr />
            <button @onclick="@Save" class="btn btn-primary btn-success"><span
                class="glyphicon glyphicon-cloud-upload"></span>Publish</button>
        </div>
    </div>
}
else
{
    <p>Loading ...</p>
}


@code {
    private PostMetadata post;

    private string markdown;

    private MarkdownEditorBase editorBase;

    protected override async Task OnInitializedAsync()
    {
        editorBase = new MarkdownEditorBase();

        if (Slug != null)
        {
            editorBase.Body = HttpUtility.HtmlDecode(await client.GetBlogPostMarkdown(Slug));
            post = await client.GetBlogPost(Slug);
        }
        else
        {
            editorBase.Body = string.Empty;
            post = new PostMetadata();
        }
    }

    private async Task Save()
    {
        Console.WriteLine("Saving");

        if (Slug == null)
        {
            string slug = createSlug();

            post.PartitionKey = slug;
            post.RowKey = slug;
        }

        await client.SaveBlogPost(post, editorBase.Body);
    }

    private string createSlug()
    {
        string slug = post.Title.Replace(' ', '-');
        slug = System.Web.HttpUtility.UrlEncode(slug);

        return slug;
    }
}