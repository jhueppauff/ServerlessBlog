@page "/add"
@page "/edit/{Slug}"

@using EditorNG.Models;
@inject BlogClient client;

@code{
    [Parameter]
    public string Slug { get; set; }
}

<h1>@Slug</h1>

@if (post != null)
{
    <div class="row">
        <div class="col-lg-12">
        <br />
            <input name="title" class="form-control" type="text" placeholder="Title?" id="title" value="@post.Title"/>
            <textarea id="postcontent" name="content" class="form-control" data-provide="markdown" data-iconlibrary="fa" rows="10">@markdown</textarea>
            <input name="preview" class="form-control" type="text" placeholder="Preview" id="preview" value="@post.Preview" />
            <input name="tags" class="form-control" type="text" placeholder="Tags" id="title" value="@tags" />
            <input name="imageUrl" class="form-control" type="text" placeholder="https://blogimage" value="@post.ImageUrl"/>
            <hr />
            <button @onclick="@Save" class="btn btn-primary btn-success"><span class="glyphicon glyphicon-cloud-upload"></span> Publish</button>
        </div>
    </div>
}
else
{
    <p>Loading ...</p>
}


@code{
    private PostMetadata post;

    private string markdown;

    private string tags;

    protected override async Task OnInitializedAsync()
    {
        if (Slug != null)
        {
            markdown = await client.GetBlogPostMarkdown(Slug);
            post = await client.GetBlogPost(Slug); 

            if (post.Tags != null)
            {
                tags = String.Join(';', post.Tags);
            }
            else
            {
                tags = string.Empty;
            }
        }
        else
        {
            tags = string.Empty;
            markdown = string.Empty;
            post = new PostMetadata();
        }
    }

    private async Task Save()
    {
        Console.WriteLine("Saving");

        if (Slug == null)
        {
            string slug = createSlug();

            post.PartitionKey = slug;
            post.RowKey = slug;
        }

        post.Tags = new List<string>();

        string[] tagArray = tags.Split(';');
        Console.WriteLine($"{tags.Length}");
        Console.WriteLine($"Tag Array length {tagArray.Length}");

        foreach (string tag in tagArray)
        {
            Console.WriteLine($"{tag},");
            post.Tags.Add(tag);
        }

        await client.SaveBlogPost(post, markdown);
    }

    private string createSlug()
    {
        string slug = post.Title.Replace(' ', '-');
        slug = System.Web.HttpUtility.UrlEncode(slug);

        return slug;
    }
}